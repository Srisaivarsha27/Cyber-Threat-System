# routes/malware.py
from fastapi import APIRouter, HTTPException
from models.malware import Malware
from database import execute_read_query, execute_write_query

router = APIRouter()

# üü¢ Create a new malware entry
@router.post("/malware")
def create_malware(malware: Malware):
    query = """
    CREATE (m:Malware {id: $id, name: $name, description: $description, category: $category, impact_level: $impact_level})
    RETURN m
    """
    execute_write_query(query, malware.dict())
    return {"message": "Malware entry created successfully"}

# üîµ Get all malware entries
@router.get("/malware")
def get_all_malware():
    query = "MATCH (m:Malware) RETURN m"
    malware_list = execute_read_query(query)
    
    if not malware_list:
        raise HTTPException(status_code=404, detail="No malware entries found")
    
    return {"malware": [m["m"] for m in malware_list]}

# üîç Get a specific malware entry by ID
@router.get("/malware/{malware_id}")
def get_malware(malware_id: str):
    query = "MATCH (m:Malware {id: $id}) RETURN m"
    result = execute_read_query(query, {"id": malware_id})

    if not result:
        raise HTTPException(status_code=404, detail="Malware entry not found")

    return {"malware": result[0]["m"]}

# üü† Update a malware entry by ID
@router.put("/malware/{malware_id}")
def update_malware(malware_id: str, malware: Malware):
    query = """
    MATCH (m:Malware {id: $id})
    SET m.name = $name, m.description = $description, m.category = $category, m.impact_level = $impact_level
    RETURN m
    """
    result = execute_read_query(query, malware.dict() | {"id": malware_id})

    if not result:
        raise HTTPException(status_code=404, detail="Malware entry not found")

    return {"message": "Malware entry updated successfully"}

# üî¥ Delete a malware entry by ID
@router.delete("/malware/{malware_id}")
def delete_malware(malware_id: str):
    query = "MATCH (m:Malware {id: $id}) DETACH DELETE m"
    execute_write_query(query, {"id": malware_id})
    return {"message": "Malware entry deleted successfully"}
