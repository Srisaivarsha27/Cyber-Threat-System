# routes/vulnerability.py
from fastapi import APIRouter, HTTPException
from models.vulnerability import Vulnerability
from database import execute_read_query, execute_write_query

router = APIRouter()

# 🟢 Create a new vulnerability entry
@router.post("/vulnerabilities")
def create_vulnerability(vulnerability: Vulnerability):
    query = """
    CREATE (v:Vulnerability {id: $id, name: $name, description: $description, category: $category, impact_level: $impact_level})
    RETURN v
    """
    execute_write_query(query, vulnerability.dict())
    return {"message": "Vulnerability entry created successfully"}

# 🔵 Get all vulnerabilities
@router.get("/vulnerabilities")
def get_all_vulnerabilities():
    query = "MATCH (v:Vulnerability) RETURN v"
    vulnerabilities = execute_read_query(query)
    
    if not vulnerabilities:
        raise HTTPException(status_code=404, detail="No vulnerabilities found")
    
    return {"vulnerabilities": [v["v"] for v in vulnerabilities]}

# 🔍 Get a specific vulnerability by ID
@router.get("/vulnerabilities/{vulnerability_id}")
def get_vulnerability(vulnerability_id: str):
    query = "MATCH (v:Vulnerability {id: $id}) RETURN v"
    result = execute_read_query(query, {"id": vulnerability_id})

    if not result:
        raise HTTPException(status_code=404, detail="Vulnerability not found")

    return {"vulnerability": result[0]["v"]}

# 🟠 Update a vulnerability entry by ID
@router.put("/vulnerabilities/{vulnerability_id}")
def update_vulnerability(vulnerability_id: str, vulnerability: Vulnerability):
    query = """
    MATCH (v:Vulnerability {id: $id})
    SET v.name = $name, v.description = $description, v.category = $category, v.impact_level = $impact_level
    RETURN v
    """
    result = execute_read_query(query, vulnerability.dict() | {"id": vulnerability_id})

    if not result:
        raise HTTPException(status_code=404, detail="Vulnerability not found")

    return result

# 🔴 Delete a vulnerability entry by ID
@router.delete("/vulnerabilities/{vulnerability_id}")
def delete_vulnerability(vulnerability_id: str):
    query = "MATCH (v:Vulnerability {id: $id}) DETACH DELETE v"
    execute_write_query(query, {"id": vulnerability_id})
    return {"message": "Vulnerability entry deleted successfully"}
